
#Область ПрограммныйИнтерфейс 

Функция ВыполнитьВыгрузкуОбработки(Обработка, ДанныеНастроек = Неопределено, ВыполнитьПуш = Истина) Экспорт
	
	// Получение настроек
	Если ДанныеНастроек = Неопределено Тогда
		ДанныеНастроек = ПолучитьДанныеНастроекВерсионирования();
	КонецЕсли;
	
	// Версионирование выключено
	Если Не ДанныеНастроек.ВключитьВерсионирование Тогда
		Возврат Истина;	
	КонецЕсли;
	
	// Проверка пути к локальоному репо
	Если Не ЗначениеЗаполнено(ДанныеНастроек.ПутьКЛокальномуРепозиторию) Тогда
		ОбщегоНазначения.СообщитьПользователю("Отсутвуют настройки локального репозитория! При включенном версионировании операция не можеть завершена!");
		Возврат Ложь;
		//ПутьКЛокальномуРепозиторию = КлонироватьРепозиторий(Настройки.АдресРепозиторияGit, Настройки.ТипАвторизацииGit,
		//	Новый Структура("Логин, Пароль, Токен, Email",
		//	Настройки.ЛогинGit, Настройки.ПарольGit, Настройки.ТокенGit, Настройки.EmailGit));
	КонецЕсли; 
	
	// Получаем свежие данные из репозитория
	ОбновитьДанныеРепозитория(ДанныеНастроек.ПутьКЛокальномуРепозиторию);
	
	// Данные обработки
	СтруктураОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Обработка, "Вид, ХранилищеОбработки, ИмяОбъекта, Ответственный, Родитель");
	
	ДанныеАвторизации = ПолучитьДанныеАвторизации(ДанныеНастроек, СтруктураОбработки.Ответственный);
	Если ДанныеАвторизации = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю("Для данного пользователя не заполнены данные авторизации в Гит! При включенном версионировании операция не можеть завершена!");
		Возврат Ложь;	
	КонецЕсли;
	
	Расширение = "epf";
	Если СтруктураОбработки.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		Или СтруктураОбработки.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Расширение = "erf";
	КонецЕсли;
	
	// Запись файла обработки
	ПолныйПутьКФайлуОбработки = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = СтруктураОбработки.ХранилищеОбработки.Получить();
	ДвоичныеДанные.Записать(ПолныйПутьКФайлуОбработки); 
	
	// Проверка хэша двоичных данных, если изменился, данные требуется перезаписать, если нет, то обработка не изменилась
	ДанныеФайла = ПрочитатьФайлНастроек(ДанныеНастроек.ПутьКЛокальномуРепозиторию);
	ХэшированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХэшированиеДанных.Добавить(ДвоичныеДанные);
	
	ХранилищеОбработок = ПолучитьДанныеХранилищаОбработок(ДанныеФайла.storages, ДанныеНастроек.ИдентификаторХранилища);
	Если ХранилищеОбработок <> Неопределено Тогда
		ДанныеОбработки = ПолучитьДанныеОбработки(ХранилищеОбработок.dictionaryStruct, СтруктураОбработки.ИмяОбъекта);		
	КонецЕсли;
	
	ОбработкаИзменена = Ложь; 
	ХэшСумма = Строка(ХэшированиеДанных.ХешСумма);
	Если ДанныеОбработки = Неопределено Или ДанныеОбработки.dataHash <> ХэшСумма Тогда
		ОбработкаИзменена = Истина;
	КонецЕсли;

	// Формирование пути к каталогу обработки
	Если ОбработкаИзменена Тогда
		// Файл логов
		ПолныйПутьКФайлуЛога = ПолучитьИмяВременногоФайла("txt");
		
		МассивПодпутей = Новый Массив;
		МассивПодпутей.Добавить(ДанныеНастроек.ИдентификаторХранилища);
		МассивПодпутей.Добавить(СтруктураОбработки.ИмяОбъекта);
		ПутьККаталогуФайловОбработки = ПолучитьПуть(ДанныеНастроек.ПутьКЛокальномуРепозиторию, МассивПодпутей);
		
		КаталогНаДиске = Новый Файл(ПутьККаталогуФайловОбработки);
		Если Не КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(ПутьККаталогуФайловОбработки);
		КонецЕсли;	
	
		// Создание файлов обработки с использованием пакетного режима конфигуратора
		СтрокаСоединенияСИБ = СтрокаСоединенияИнформационнойБазы();
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			МассивСтрокиСоединения = СтрРазделить(СтрокаСоединенияСИБ, """");
			Команда = """" + КаталогПрограммы() + "1cv8.exe" + """ DESIGNER /F """ + МассивСтрокиСоединения[1] + """"
				+ " /N" + ДанныеНастроек.Пользователь1С + " /P" + ДанныеНастроек.Пароль1С
				+ " /DumpExternalDataProcessorOrReportToFiles """ + ПутьККаталогуФайловОбработки
				+ """ """ + ПолныйПутьКФайлуОбработки + """ /Out """ + ПолныйПутьКФайлуЛога + """"; 
		Иначе
			
		КонецЕсли;
		Результат = ВыполнитьКомандуСистемы(Команда); 
		Если Не ИзменитьДанныеОбработки(ХранилищеОбработок.dictionaryStruct, СтруктураОбработки.ИмяОбъекта, ХэшСумма) Тогда
			ДобавитьДанныеОбработки(ХранилищеОбработок.dictionaryStruct, СтруктураОбработки.СтруктураОбработки, СтруктураОбработки.ИмяОбъекта, ХэшСумма);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьФайлНастроек(ДанныеНастроек.ПутьКЛокальномуРепозиторию, ДанныеФайла);
	Если ВыполнитьПуш Тогда
		ЗапушитьРепозиторий(ДанныеНастроек,	ДанныеНастроек.ПутьКЛокальномуРепозиторию, ДанныеАвторизации, 
			"Обновление данных обработки "  + СтруктураОбработки.ИмяОбъекта + " пользователем " + ДанныеОбработки.Ответственный);
	КонецЕсли;
	
	// Удаление временных файлов
	ФайловаяСистема.УдалитьВременныйФайл(ПолныйПутьКФайлуОбработки);
	ФайловаяСистема.УдалитьВременныйФайл(ПолныйПутьКФайлуЛога);
	
	Возврат Истина;
	
КонецФункции

Функция КлонироватьРепозиторий(ДанныеНастроек, АдресУдаленногоРепозитория, ПутьКЛокальномуРепозиторию, ДанныеАвторизации) Экспорт
	
	Если ДанныеНастроек.ТипGitСервера = Перечисления.ВерсВО_ТипыGitСервера.GitHub Тогда
		
		АдресРепозиторияСАвторизацией = ПолучитьURLРепозиторияСАвторизацией(ДанныеНастроек, АдресУдаленногоРепозитория, ДанныеАвторизации); 	
		
		Результат = ВыполнитьКомандуСистемы("git clone " + АдресРепозиторияСАвторизацией + " " + ПутьКЛокальномуРепозиторию);
		
		Если Результат.КодВозврата <> 0 Или
			ЗначениеЗаполнено(Результат.ПотокВывода) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

Функция ЗапушитьРепозиторий(ДанныеНастроек, ПутьККаталогуРепозитория, ДанныеАвторизации, ТекстКоммита) Экспорт

	Если ПроверитьНаличиеГит() И ЗначениеЗаполнено(ДанныеАвторизации.Логин) И ЗначениеЗаполнено(ДанныеАвторизации.Email) Тогда
		ВыполнитьКомандуСистемы("git config --global user.name " + ДанныеАвторизации.Логин, ПутьККаталогуРепозитория);
		ВыполнитьКомандуСистемы("git config --global user.email " + ДанныеАвторизации.Email, ПутьККаталогуРепозитория);
		
		АдресРепозиторияСАвторизацией = ПолучитьURLРепозиторияСАвторизацией(ДанныеНастроек, ДанныеНастроек.ПутьКРепозиториюGit, ДанныеАвторизации);
		ВыполнитьКомандуСистемы("git remote set-url origin " + АдресРепозиторияСАвторизацией, ПутьККаталогуРепозитория);
		
		ВыполнитьКомандуСистемы("git add .", ПутьККаталогуРепозитория);
		ВыполнитьКомандуСистемы("git commit -m """ + ТекстКоммита + """", ПутьККаталогуРепозитория);
		ВыполнитьКомандуСистемы("git push", ПутьККаталогуРепозитория);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗакоммититьИзменения(ДанныеНастроек, ДанныеАвторизации, ТекстКоммита) Экспорт
	
	ПутьККаталогуРепозитория = ДанныеНастроек.ПутьКЛокальномуРепозиторию;
	
	Если ПроверитьНаличиеГит() И ЗначениеЗаполнено(ДанныеАвторизации.Логин) И ЗначениеЗаполнено(ДанныеАвторизации.Email) Тогда
		ВыполнитьКомандуСистемы("git config --global user.name " + ДанныеАвторизации.Логин, ПутьККаталогуРепозитория);
		ВыполнитьКомандуСистемы("git config --global user.email " + ДанныеАвторизации.Email, ПутьККаталогуРепозитория);
		
		АдресРепозиторияСАвторизацией = ПолучитьURLРепозиторияСАвторизацией(ДанныеНастроек, ДанныеНастроек.ПутьКРепозиториюGit, ДанныеАвторизации);
		ВыполнитьКомандуСистемы("git remote set-url origin " + АдресРепозиторияСАвторизацией, ПутьККаталогуРепозитория);
		
		ВыполнитьКомандуСистемы("git add .", ПутьККаталогуРепозитория);
		ВыполнитьКомандуСистемы("git commit -m """ + ТекстКоммита + """", ПутьККаталогуРепозитория);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

функция ОбновитьДанныеРепозитория(ПутьККаталогуРепозитория) Экспорт

	Возврат ВыполнитьКомандуСистемы("git pull", ПутьККаталогуРепозитория);
	
КонецФункции

Функция ПолучитьСведенияОРепозитории(ДанныеНастроек, АдресУдаленногоРепозитория, ПутьКЛокальномуРепозиторию, ДанныеАвторизации) Экспорт
	
	СведенияОРепо = Новый Структура("АвторизацияУспешна, Пустой, СписокХранилищ", Истина, Истина, Новый Массив);
	
	Если Не ЗначениеЗаполнено(АдресУдаленногоРепозитория) Или Не ЗначениеЗаполнено(ПутьКЛокальномуРепозиторию) Или
		Не КлонироватьРепозиторий(ДанныеНастроек, АдресУдаленногоРепозитория, ПутьКЛокальномуРепозиторию, ДанныеАвторизации) Тогда
		СведенияОРепо.АвторизацияУспешна = Ложь; 
		Возврат СведенияОРепо; 
	КонецЕсли;
	
	НайденныеФайлы = НайтиФайлы(ПутьКЛокальномуРепозиторию);
	Если НайденныеФайлы.Количество() > 0 Тогда
		СведенияОРепо.Пустой = Ложь;
		Данные = ПрочитатьФайлНастроек(ПутьКЛокальномуРепозиторию);
		Если ТипЗнч(Данные) = Тип("Структура") И Данные.Свойство("storages") Тогда
			Для Каждого Хранилище Из Данные.storages Цикл 
				СтруктураХранилища = Новый Структура("name, masterDataBase");
				ЗаполнитьЗначенияСвойств(СтруктураХранилища, Хранилище);
				СведенияОРепо.СписокХранилищ.Добавить(СтруктураХранилища);	
			КонецЦикла;
		КонецЕсли;
	Иначе
		СведенияОРепо.Пустой = Истина;
	КонецЕсли;
	
	Возврат СведенияОРепо;
	
КонецФункции

Функция ПолучитьДанныеНастроекВерсионирования() Экспорт
	
	СтруктураДанных = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсВО_Константы.Наименование КАК Наименование,
		|	ВерсВО_Константы.Значение КАК Значение
		|ИЗ
		|	Справочник.ВерсВО_Константы КАК ВерсВО_Константы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных.Вставить(ВыборкаДетальныеЗаписи.Наименование, ВыборкаДетальныеЗаписи.Значение);
	КонецЦикла;
	
	Возврат СтруктураДанных; 
	
КонецФункции 

функция ПолучитьДанныеАвторизации(ДанныеНастроек, Пользователь) Экспорт
	
	СтруктураАвторизации = Новый Структура; 
	Если ДанныеНастроек.СинхронизироватьПользователей Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВерсВО_ПользователиGit.Логин КАК Логин,
			|	ВерсВО_ПользователиGit.Пароль КАК Пароль,
			|	ВерсВО_ПользователиGit.Токен КАК Токен,
			|	ВерсВО_ПользователиGit.Email КАК Email
			|ИЗ
			|	РегистрСведений.ВерсВО_ПользователиGit КАК ВерсВО_ПользователиGit
			|ГДЕ
			|	ВерсВО_ПользователиGit.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		ТзПользователи = Запрос.Выполнить().Выбрать();
		
		Если ТзПользователи.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураАвторизации.Вставить("Email", ТзПользователи[0].Email);
		Если ДанныеНастроек.ТипАвторизацииGit = Перечисления.ВерсВО_ТипАвторизацииGit.ЛогинПароль Тогда
			СтруктураАвторизации.Вставить("Логин", ТзПользователи[0].Логин);
			СтруктураАвторизации.Вставить("Пароль", ТзПользователи[0].Пароль);
		ИначеЕсли ДанныеНастроек.ТипАвторизацииGit = Перечисления.ВерсВО_ТипАвторизацииGit.Токен Тогда
			СтруктураАвторизации.Вставить("Токен", ТзПользователи[0].Токен);
		КонецЕсли;
		
	Иначе
		СтруктураАвторизации.Вставить("Email", ДанныеНастроек.EmailGit);
		Если ДанныеНастроек.ТипАвторизацииGit = Перечисления.ВерсВО_ТипАвторизацииGit.ЛогинПароль Тогда
			СтруктураАвторизации.Вставить("Логин", ДанныеНастроек.ЛогинGit);
			СтруктураАвторизации.Вставить("Пароль", ДанныеНастроек.ПарольGit);
		ИначеЕсли ДанныеНастроек.ТипАвторизацииGit = Перечисления.ВерсВО_ТипАвторизацииGit.Токен Тогда
			СтруктураАвторизации.Вставить("Токен", ДанныеНастроек.ТокенGit);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураАвторизации;
	
КонецФункции

Функция ПервичнаяВыгрузкаСправочникаОбработокВФоне(ПараметрыЗапуска, УникальныйИдентификатор) Экспорт

	НаименованиеЗадания = "Первичная выгрузка справочника обработок.";

	ВыполняемыйМетод = "ВерсВО_ОбщегоНазначения.ПервичнаяВыгрузкаСправочникаОбработок";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне 	= Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗапуска, ПараметрыВыполнения);
	
	Возврат СтруктураФоновогоЗадания;
	
КонецФункции

Процедура ПервичнаяВыгрузкаСправочникаОбработок(Параметры, АдресРезультата) Экспорт
	
	Настройки = ПолучитьДанныеНастроекВерсионирования();
	Если Не Настройки.ВключитьВерсионирование Тогда
		Возврат;	
	КонецЕсли;
	
	ПутьКЛокальномуРепозиторию = Параметры.ПутьКЛокальномуРепозиторию;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка,
		|	ДополнительныеОтчетыИОбработки.Наименование КАК Наименование,
		|	ДополнительныеОтчетыИОбработки.ЭтоГруппа КАК ЭтоГруппа,
		|	ДополнительныеОтчетыИОбработки.Родитель КАК Родитель,
		|	ДополнительныеОтчетыИОбработки.ИмяОбъекта КАК ИмяОбъекта,
		|	ДополнительныеОтчетыИОбработки.ХранилищеОбработки КАК ХранилищеОбработки
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ";
	
	ТзДополнительныхОбработок = Запрос.Выполнить().Выгрузить();
	
	// ПроверкаФайла
	Файл = Новый Файл(ПутьКЛокальномуРепозиторию + "/properties.json");
	Если Файл.Существует() Тогда
		Данные = ПрочитатьФайлНастроек(ПутьКЛокальномуРепозиторию);
	Иначе
		Данные = Новый Структура("storages", Новый Массив);
	КонецЕсли;
	
	СтруктураХранилища = Новый Структура("name, masterDataBase, dictionaryStruct", 
		ПолучитьНовыйИдентификаторХранилища(), СтрокаСоединенияИнформационнойБазы(), Новый Массив);
		
	МассивВерхнегоУровня = ТзДополнительныхОбработок.НайтиСтроки(Новый Структура("Родитель", Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка()));
	Для Каждого СтрокаТз Из МассивВерхнегоУровня Цикл
		ЗаполнитьСтруктуруЭлементовСправочника(СтруктураХранилища.dictionaryStruct, СтрокаТз, ТзДополнительныхОбработок);
	КонецЦикла;
	Данные.storages.Добавить(СтруктураХранилища);
	
	МассивСтрокОбработок = ТзДополнительныхОбработок.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь));
	Для Каждого СтрокаОбработки Из МассивСтрокОбработок Цикл
		ВыполнитьВыгрузкуОбработки(СтрокаОбработки.Ссылка, ПутьКЛокальномуРепозиторию, Настройки);
	КонецЦикла;
	
	// Заполнение файла properties
	ЗаписатьФайлНастроек(ПутьКЛокальномуРепозиторию, Данные);
	
	// Пуш измененных данных в Репозиторий
	// Получение настроек
	ЗапушитьРепозиторий(Настройки, ПутьКЛокальномуРепозиторию, 
		Новый Структура("Логин, Пароль, Токен, Email", Настройки.ЛогинGit, Настройки.ПарольGit, Настройки.ТокенGit, Настройки.EmailGit), 
		"Первая настройка и выгрузка справочника в хранилще.");	
	
	//Удаление временного каталога
	ФайловаяСистема.УдалитьВременныйКаталог(ПутьКЛокальномуРепозиторию);
	
КонецПроцедуры

Процедура ДобавитьОбработкуКВыгрузке(СсылкаНаОбработку, Пользователь) Экспорт
	
	СтруктураОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбработку, "Ответственный, ХранилищеОбработки");
	
	МенеджерЗаписи = РегистрыСведений.ВерсВО_ВыгрузкаВерсийОбработок.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.Обработка = СсылкаНаОбработку;
	МенеджерЗаписи.Пользователь = СтруктураОбработки.Ответственный;
	МенеджерЗаписи.Файл = Новый ХранилищеЗначения(СтруктураОбработки.ХранилищеОбработки.Получить());
	МенеджерЗаписи.Комментарий = "Обработка была изменена " + СтруктураОбработки.Ответственный;
	МенеджерЗаписи.ДатаИзменения = ТекущаяДатаСеанса();
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция ВыполнитьВыгрузкуИКоммитОбработки(ДанныеНастроек, ДанныеАвторизации, ДанныеОбработки) Экспорт
	
	Если ДанныеНастроек.СинхронилизроватьПользователей Тогда
		ДанныеАвторизации = ПолучитьДанныеАвторизации(ДанныеНастроек, ДанныеОбработки.Пользователь);
		Если ДанныеАвторизации = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю("Для данного пользователя не заполнены данные авторизации в Гит! При включенном версионировании операция не можеть завершена!");
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	
	// Запись файла обработки
	ПолныйПутьКФайлуОбработки = ПолучитьИмяВременногоФайла(ДанныеОбработки.Расширение);
	ДвоичныеДанные = ДанныеОбработки.Файл.Получить();
	ДвоичныеДанные.Записать(ПолныйПутьКФайлуОбработки); 
	
	// Проверка хэша двоичных данных, если изменился, данные требуется перезаписать, если нет, то обработка не изменилась
	ДанныеФайла = ПрочитатьФайлНастроек(ДанныеНастроек.ПутьКЛокальномуРепозиторию);
	ХэшированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХэшированиеДанных.Добавить(ДвоичныеДанные);
	
	ХранилищеОбработок = ПолучитьДанныеХранилищаОбработок(ДанныеФайла.storages, ДанныеНастроек.ИдентификаторХранилища);
	Если ХранилищеОбработок <> Неопределено Тогда
		ДанныеОбработкиВФайле = ПолучитьДанныеОбработки(ХранилищеОбработок.dictionaryStruct, ДанныеОбработки.ИмяОбъекта);		
	КонецЕсли;
	
	ОбработкаИзменена = Ложь; 
	ХэшСумма = Строка(ХэшированиеДанных.ХешСумма);
	Если ДанныеОбработкиВФайле = Неопределено Или ДанныеОбработкиВФайле.dataHash <> ХэшСумма Тогда
		ОбработкаИзменена = Истина;
	КонецЕсли;

	// Формирование пути к каталогу обработки
	Если ОбработкаИзменена Тогда
		// Файл логов
		ПолныйПутьКФайлуЛога = ПолучитьИмяВременногоФайла("txt");
		
		МассивПодпутей = Новый Массив;
		МассивПодпутей.Добавить(ДанныеНастроек.ИдентификаторХранилища);
		МассивПодпутей.Добавить(ДанныеОбработки.ИмяОбъекта);
		ПутьККаталогуФайловОбработки = ПолучитьПуть(ДанныеНастроек.ПутьКЛокальномуРепозиторию, МассивПодпутей);
		
		КаталогНаДиске = Новый Файл(ПутьККаталогуФайловОбработки);
		Если Не КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(ПутьККаталогуФайловОбработки);
		КонецЕсли;	
	
		// Создание файлов обработки с использованием пакетного режима конфигуратора
		СтрокаСоединенияСИБ = СтрокаСоединенияИнформационнойБазы();
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			МассивСтрокиСоединения = СтрРазделить(СтрокаСоединенияСИБ, """");
			Команда = """" + КаталогПрограммы() + "1cv8.exe" + """ DESIGNER /F """ + МассивСтрокиСоединения[1] + """"
				+ " /N" + ДанныеНастроек.Пользователь1С + " /P" + ДанныеНастроек.Пароль1С
				+ " /DumpExternalDataProcessorOrReportToFiles """ + ПутьККаталогуФайловОбработки
				+ """ """ + ПолныйПутьКФайлуОбработки + """ /Out """ + ПолныйПутьКФайлуЛога + """"; 
		Иначе
			
		КонецЕсли;
		Результат = ВыполнитьКомандуСистемы(Команда); 
		Если Не ИзменитьДанныеОбработки(ХранилищеОбработок.dictionaryStruct, ДанныеОбработки.ИмяОбъекта, ХэшСумма) Тогда
			ДобавитьДанныеОбработки(ХранилищеОбработок.dictionaryStruct, ДанныеОбработки.ИмяРодителя, ДанныеОбработки.ИмяОбъекта, ХэшСумма);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьФайлНастроек(ДанныеНастроек.ПутьКЛокальномуРепозиторию, ДанныеФайла);
	
	ЗакоммититьИзменения(ДанныеНастроек, ДанныеАвторизации, ДанныеОбработки.ТекстКоммита + " " + ДанныеОбработки.ДатаИзменения);
	
	// Удаление временных файлов
	ФайловаяСистема.УдалитьВременныйФайл(ПолныйПутьКФайлуОбработки);
	ФайловаяСистема.УдалитьВременныйФайл(ПолныйПутьКФайлуЛога);
	
	Возврат Истина;
	
КонецФункции

Процедура ВыгрузитьДанныеВХранилище() Экспорт
	
	// Получение настроек
	ДанныеНастроек = ПолучитьДанныеНастроекВерсионирования();
	ДанныеАвторизации = ПолучитьДанныеАвторизации(ДанныеНастроек, ДанныеНастроек.Пользователь1С);
	// Версионирование выключено
	Если Не ДанныеНастроек.ВключитьВерсионирование Тогда
		Возврат;	
	КонецЕсли;
	// Проверка пути к локальоному репо
	Если Не ЗначениеЗаполнено(ДанныеНастроек.ПутьКЛокальномуРепозиторию) Тогда
		ОбщегоНазначения.СообщитьПользователю("Отсутвуют настройки локального репозитория! При включенном версионировании операция не можеть завершена!");
		Возврат;
	КонецЕсли;
	// Получаем свежие данные из репозитория
	ОбновитьДанныеРепозитория(ДанныеНастроек.ПутьКЛокальномуРепозиторию);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсВО_ВыгрузкаВерсийОбработок.Обработка КАК Обработка,
		|	ВерсВО_ВыгрузкаВерсийОбработок.Обработка.ИмяОбъекта КАК ИмяОбъекта,
		|	ВерсВО_ВыгрузкаВерсийОбработок.Обработка.Родитель.Наименование Как ИмяРодителя,
		|	ВерсВО_ВыгрузкаВерсийОбработок.ДатаИзменения КАК ДатаИзменения,
		|	ВерсВО_ВыгрузкаВерсийОбработок.Файл,
		|	ВерсВО_ВыгрузкаВерсийОбработок.Пользователь,
		|	ВерсВО_ВыгрузкаВерсийОбработок.Комментарий,
		|	ВЫБОР
		|		КОГДА
		|			ВерсВО_ВыгрузкаВерсийОбработок.Обработка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.Отчет)
		|		ИЛИ
		|			ВерсВО_ВыгрузкаВерсийОбработок.Обработка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет)
		|			ТОГДА ""erf""
		|		ИНАЧЕ ""epf""
		|	КОНЕЦ КАК Расширение
		|ИЗ
		|	РегистрСведений.ВерсВО_ВыгрузкаВерсийОбработок КАК ВерсВО_ВыгрузкаВерсийОбработок
		|
		|УПОРЯДОЧИТЬ ПО
		|	Обработка,
		|	ДатаИзменения";
	 
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДанныеОбработки = Новый Структура("ИмяОбъекта, ИмяРодителя, Файл, Расширение, Пользователь, ТекстКоммита, ДатаИзменения",
			ВыборкаДетальныеЗаписи.ИмяОбъекта, 
			ВыборкаДетальныеЗаписи.ИмяРодителя,
			ВыборкаДетальныеЗаписи.Файл, 
			ВыборкаДетальныеЗаписи.Расширение, 
			ВыборкаДетальныеЗаписи.Пользователь, 
			ВыборкаДетальныеЗаписи.Комментарий, 
			ВыборкаДетальныеЗаписи.ДатаИзменения);
		ВыполнитьВыгрузкуИКоммитОбработки(
			ДанныеНастроек, 
			ДанныеАвторизации,
			ДанныеОбработки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПроверитьНаличиеГит() Экспорт
	
	Возврат Не СтрНайти(ВыполнитьКомандуСистемы("git --version").ПотокВывода, "version") = 0;	
	
КонецФункции 

Функция ПроверитьПодключениеКГит(АдресГитРепозитория, ДанныеУдаленногоРепозитория, ПутьКЛокальномуРепозиторию = Неопределено) Экспорт
	
	ДанныеНастроек = ПолучитьДанныеНастроекВерсионирования();

	Если ПутьКЛокальномуРепозиторию = Неопределено Тогда
		ПутьКЛокальномуРепозиторию = ФайловаяСистема.СоздатьВременныйКаталог();
	КонецЕсли;

	ПолныйПутьКРепо = КлонироватьРепозиторий(ДанныеНастроек, АдресГитРепозитория, ПутьКЛокальномуРепозиторию, ДанныеУдаленногоРепозитория);
	
	Если Не ПустаяСтрока(ПолныйПутьКРепо) Тогда 
		ФайловаяСистема.УдалитьВременныйКаталог(ПолныйПутьКРепо);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

Функция ВыполнитьПинг(Url) Экспорт 
	
	МассивПодстрок = СтрРазделить(СтрЗаменить(СтрЗаменить(Url, "http://", ""), "https://", ""), "/");
	
	Возврат ВыполнитьКомандуСистемы("ping " + МассивПодстрок[0]).КодВозврата = 0;	
	
КонецФункции 

Функция ПолучитьСтруктуруКонстант() Экспорт

	СтруктураКонстант = Новый Структура;
	СтруктураКонстант.Вставить("ВключитьВерсионирование",				Ложь);
	СтруктураКонстант.Вставить("АдресРепозиторияGit",					"");
	СтруктураКонстант.Вставить("ПутьКЛокальномуРепозиторию",			"");
	СтруктураКонстант.Вставить("ИдентификаторХранилища",				"");
	СтруктураКонстант.Вставить("SSHGit",								"");
	СтруктураКонстант.Вставить("ЛогинGit",								"");
	СтруктураКонстант.Вставить("ПарольGit",								"");
	СтруктураКонстант.Вставить("ТокенGit",								"");
	СтруктураКонстант.Вставить("EmailGit",								"");
	СтруктураКонстант.Вставить("АдресБазы1С",							"");
	СтруктураКонстант.Вставить("Пользователь1С",						"");
	СтруктураКонстант.Вставить("Пароль1С",								"");
	СтруктураКонстант.Вставить("СинхронизироватьПользователей",			Ложь);
	СтруктураКонстант.Вставить("СинхронизироватьСтруктуруСправочника",	Ложь);
	СтруктураКонстант.Вставить("ТипGitСервера",							Перечисления.ВерсВО_ТипыGitСервера.GitHub);
	СтруктураКонстант.Вставить("ТипАвторизацииGit",						Перечисления.ВерсВО_ТипАвторизацииGit.ЛогинПароль);
	
	Возврат СтруктураКонстант;
	
КонецФункции

Функция ПолучитьПуть(Путь, МассивПодпутей = Неопределено) Экспорт 
	
	Если МассивПодпутей = Неопределено Или МассивПодпутей.Количество() = 0 Тогда
		Возврат Путь	
	КонецЕсли;
	
	ПолныйПуть = Путь; 
	Для Каждого Подпуть Из МассивПодпутей Цикл
		ПолныйПуть = ПолныйПуть + "/" + Подпуть;	
	КонецЦикла;
	
	Возврат ПолныйПуть; 
	
КонецФункции

Функция ПолучитьНовыйИдентификаторХранилища()Экспорт
	
	Возврат ИнтернетПоддержкаПользователей.ИмяКонфигурации() + "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Функция ПолучитьURLРепозиторияСАвторизацией(ДанныеНастроек, АдресУдаленногоРепозитория, СтруктураАвторизации) 
	
	Если ДанныеНастроек.ТипАвторизации = Перечисления.ВерсВО_ТипАвторизацииGit.Токен Тогда
		
		ПутьКРепозиторию = СтрЗаменить(АдресУдаленногоРепозитория, "https://", "");
		ПутьКРепозиторию = СтрЗаменить(ПутьКРепозиторию, "http://", ""); 
		
		Если СтрНайти(АдресУдаленногоРепозитория, "https://") Тогда 
			АдресРепозиторияСАвторизацией = СтрШаблон("https://oauth2:%1@%2", СтруктураАвторизации.Токен, ПутьКРепозиторию); 
			//ПутьКРепозиториюСЛогином = "https://oauth2:" + Токен + "@" + ПутьКРепозиторию;		
		Иначе
			АдресРепозиторияСАвторизацией = "http://oauth2:" + СтруктураАвторизации.Токен + "@" + ПутьКРепозиторию;		
		КонецЕсли;
		
		Возврат АдресРепозиторияСАвторизацией;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ВыполнитьКомандуСистемы(Команда, ТекущийКаталог = "")
	
	// Запуск с ожиданием завершения и получения кода возврата
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ТекущийКаталог = ТекущийКаталог;
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	
	Возврат ФайловаяСистема.ЗапуститьПрограмму(Команда, ПараметрыЗапускаПрограммы);
	
КонецФункции

Функция ПолучитьДанныеХранилищаОбработок(КоллекцияДанныхХранилищОбработок, Идентификатор)
	
	Для Каждого Хранилище Из КоллекцияДанныхХранилищОбработок Цикл
		Если Хранилище.name = Идентификатор Тогда
			Возврат Хранилище;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДанныеОбработки(КоллекцияДанныхОбработок, ИмяОбъекта)
	
	Для Каждого Обработка Из КоллекцияДанныхОбработок Цикл
		Если Обработка.processorId = ИмяОбъекта Тогда
			Возврат Обработка;
		ИначеЕсли Обработка.isGroup Тогда
			ДанныеПодгруппы = ПолучитьДанныеОбработки(Обработка.subData, ИмяОбъекта);
			Если ДанныеПодгруппы <> Неопределено Тогда
				Возврат ДанныеПодгруппы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

Функция ИзменитьДанныеОбработки(ДанныеКоллекцииОбработок, ИмяОбъекта, ХэшСумма)

	Для Каждого Обработка Из ДанныеКоллекцииОбработок Цикл
		Если Обработка.name = ИмяОбъекта Тогда
			Обработка.dataHash = ХэшСумма;
			Возврат Истина;
		ИначеЕсли Обработка.isGroup Тогда
			ЗаписьИзменена = ИзменитьДанныеОбработки(Обработка.subData, ИмяОбъекта, ХэшСумма);
			Если ЗаписьИзменена Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ДобавитьДанныеОбработки(ДанныеКоллекцииОбработок, ИмяРодителя, ИмяОбъекта, ХэшСумма) 
	
	Для Каждого Обработка Из ДанныеКоллекцииОбработок Цикл
		Если Обработка.name = ИмяРодителя Тогда
			Обработка.subData.Добавить(Новый Структура("name, isGroup, subData, dataHash", ИмяОбъекта, Ложь, Новый Массив, ХэшСумма));
			Возврат Истина;
		ИначеЕсли Обработка.isGroup Тогда
			ЗаписьДобавлена = ДобавитьДанныеОбработки(Обработка.subData, ИмяРодителя, ИмяОбъекта, ХэшСумма);
			Если ЗаписьДобавлена Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

	
КонецФункции


Функция ПрочитатьФайлНастроек(ПутьКЛокальномуРепозиторию)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКЛокальномуРепозиторию + "/properties.json"); 
	Данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	Возврат Данные;
	
КонецФункции 

Процедура ЗаписатьФайлНастроек(ПутьКЛокальномуРепозиторию, Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ПутьКЛокальномуРепозиторию + "/properties.json",,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Данные); 
	ЗаписьJSON.Закрыть();
	
КонецПроцедуры 

Процедура ЗаполнитьСтруктуруЭлементовСправочника(МассивДляДобавления, СтрокаТз, ТзДополнительныхОбработок)
	
	СтруктураЭлемента = Новый Структура("name, isGroup, processorId, dataHash, subData", 
		СтрокаТз.Наименование, СтрокаТз.ЭтоГруппа, "", "", Новый Массив);

	Если Не СтрокаТз.ЭтоГруппа Тогда
		СтруктураЭлемента.processorId = СтрокаТз.ИмяОбъекта; 
		ХэшированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
		ХэшированиеДанных.Добавить(СтрокаТз.ХранилищеОбработки.Получить());
		СтруктураЭлемента.dataHash = Строка(ХэшированиеДанных.ХешСумма);
	КонецЕсли;
		
	МассивДочерних = ТзДополнительныхОбработок.НайтиСтроки(Новый Структура("Родитель", СтрокаТз.Ссылка));
	Для Каждого СтрокаДочерний Из МассивДочерних Цикл
		ЗаполнитьСтруктуруЭлементовСправочника(СтруктураЭлемента.subData, СтрокаДочерний, ТзДополнительныхОбработок);
	КонецЦикла;
	
	МассивДляДобавления.Добавить(СтруктураЭлемента);
	
КонецПроцедуры 

#КонецОбласти


// В данном файле будут храниться идентификаторы обработок и хэш суммы их двоичных данных
// Также структура справочника и список хранилищ обработок
//
//properties.json
//
//{
//	storages: [{
//		name: "",
//		masterDataBase: "Комплексная автоматизация",
//		dictionaryStruct: [{
//			"name": "Название группы",
//			"isGroup": "True",
//			"processorId": "",
//			"dataHash": "",
//			"subData": [{
//				"name": "Название",
//				"isGroup": "False",
//				"processorId": "ОбработкаЧегоТоТам",
//				"dataHash": "Хэш двочиных данных обработки",
//				"subData": ""
//			}]
//		}]
//	}]



		